const { User, PERMISSIONS, ADMIN_ROLES, DEFAULT_PERMISSIONS } = require('../models/user.model');
const logger = require('../config/logger');

// Obtenir la liste des administrateurs en attente de validation
const getPendingAdmins = async (req, res) => {
    try {
        logger.info('\nüì• R√©cup√©ration des administrateurs en attente');
        const pendingAdmins = await User.find({
            role: { $ne: 'user' },
            isAdminValidated: false,
            adminType: { $ne: ADMIN_ROLES.SUPERADMIN }
        }).select('-password');

        logger.info('‚úÖ Administrateurs en attente r√©cup√©r√©s', { count: pendingAdmins.length });
        res.json(pendingAdmins);
    } catch (error) {
        logger.error('‚ùå Erreur r√©cup√©ration administrateurs en attente', { message: error.message, stack: error.stack });
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des administrateurs en attente" });
    }
};

// Valider un compte administrateur avec des permissions personnalis√©es
const validateAdmin = async (req, res) => {
    try {
        const { adminId } = req.params;
        const { customPermissions } = req.body;
        logger.info('\nüõÇ Validation d\'un administrateur', { adminId, withCustomPermissions: Array.isArray(customPermissions) ? customPermissions.length : 0 });

        const admin = await User.findById(adminId);
        if (!admin) {
            logger.warn('‚ö†Ô∏è Administrateur non trouv√©', { adminId });
            return res.status(404).json({ message: "Administrateur non trouv√©" });
        }

        if (admin.role === 'user') {
            logger.warn('‚ö†Ô∏è L\'utilisateur n\'est pas un administrateur', { adminId });
            return res.status(400).json({ message: "L'utilisateur n'est pas un administrateur" });
        }

        if (admin.adminType === ADMIN_ROLES.SUPERADMIN) {
            logger.warn('‚ö†Ô∏è Tentative de modification d\'un super administrateur', { adminId });
            return res.status(400).json({ message: "Impossible de modifier les permissions d'un super administrateur" });
        }

        if (admin.isAdminValidated) {
            logger.warn('‚ö†Ô∏è Administrateur d√©j√† valid√©', { adminId });
            return res.status(400).json({ message: "L'administrateur est d√©j√† valid√©" });
        }

        // V√©rifier que les permissions personnalis√©es sont valides
        if (customPermissions) {
            const invalidPermissions = customPermissions.filter(
                permission => !Object.values(PERMISSIONS).includes(permission)
            );

            if (invalidPermissions.length > 0) {
                logger.warn('‚ö†Ô∏è Permissions personnalis√©es invalides', { adminId, invalidPermissions });
                return res.status(400).json({
                    message: "Certaines permissions sont invalides",
                    invalidPermissions
                });
            }

            // Appliquer les permissions personnalis√©es
            admin.permissions = customPermissions;
        }

        admin.isAdminValidated = true;
        await admin.save();

        logger.info('‚úÖ Administrateur valid√© avec succ√®s', { adminId });
        res.json({ 
            message: "Compte administrateur valid√© avec succ√®s",
            admin: {
                ...admin.toObject(),
                password: undefined
            }
        });
    } catch (error) {
        logger.error('‚ùå Erreur validation administrateur', { message: error.message, stack: error.stack, adminId: req.params?.adminId });
        res.status(500).json({ message: "Erreur lors de la validation de l'administrateur" });
    }
};

// R√©voquer un administrateur
const revokeAdmin = async (req, res) => {
    try {
        const { adminId } = req.params;
        logger.info('\nüö´ R√©vocation d\'un administrateur', { adminId });

        const admin = await User.findById(adminId);
        if (!admin) {
            logger.warn('‚ö†Ô∏è Administrateur non trouv√© (r√©vocation)', { adminId });
            return res.status(404).json({ message: "Administrateur non trouv√©" });
        }

        if (admin.role === 'user') {
            logger.warn('‚ö†Ô∏è L\'utilisateur n\'est pas un administrateur (r√©vocation)', { adminId });
            return res.status(400).json({ message: "L'utilisateur n'est pas un administrateur" });
        }

        if (admin.adminType === ADMIN_ROLES.SUPERADMIN) {
            logger.warn('‚ö†Ô∏è Tentative de r√©vocation d\'un super administrateur', { adminId });
            return res.status(400).json({ message: "Impossible de r√©voquer un super administrateur" });
        }

        admin.isAdminValidated = false;
        await admin.save();

        logger.info('‚úÖ Administrateur r√©voqu√© avec succ√®s', { adminId });
        res.json({ message: "Acc√®s administrateur r√©voqu√© avec succ√®s" });
    } catch (error) {
        logger.error('‚ùå Erreur r√©vocation administrateur', { message: error.message, stack: error.stack, adminId: req.params?.adminId });
        res.status(500).json({ message: "Erreur lors de la r√©vocation de l'administrateur" });
    }
};

// Obtenir la liste de tous les administrateurs
const getAllAdmins = async (req, res) => {
    try {
        logger.info('\nüìã R√©cup√©ration de tous les administrateurs');
        const admins = await User.find({
            role: { $ne: 'user' }
        }).select('-password');

        logger.info('‚úÖ Administrateurs r√©cup√©r√©s', { count: admins.length });
        res.json(admins);
    } catch (error) {
        logger.error('‚ùå Erreur r√©cup√©ration administrateurs (tous)', { message: error.message, stack: error.stack });
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des administrateurs" });
    }
};

// Mettre √† jour les permissions d'un administrateur
const updateAdminPermissions = async (req, res) => {
    try {
        const { adminId } = req.params;
        const { permissions } = req.body;
        logger.info('\nüîß Mise √† jour des permissions administrateur', { adminId, permissionsCount: Array.isArray(permissions) ? permissions.length : 0 });

        const admin = await User.findById(adminId);
        if (!admin) {
            logger.warn('‚ö†Ô∏è Administrateur non trouv√© (update permissions)', { adminId });
            return res.status(404).json({ message: "Administrateur non trouv√©" });
        }

        if (admin.role === 'user') {
            logger.warn('‚ö†Ô∏è L\'utilisateur n\'est pas un administrateur (update permissions)', { adminId });
            return res.status(400).json({ message: "L'utilisateur n'est pas un administrateur" });
        }

        if (admin.adminType === ADMIN_ROLES.SUPERADMIN) {
            logger.warn('‚ö†Ô∏è Tentative de modification d\'un super administrateur (update permissions)', { adminId });
            return res.status(400).json({ message: "Impossible de modifier les permissions d'un super administrateur" });
        }

        // V√©rifier que les permissions sont valides
        const invalidPermissions = permissions.filter(
            permission => !Object.values(PERMISSIONS).includes(permission)
        );

        if (invalidPermissions.length > 0) {
            logger.warn('‚ö†Ô∏è Permissions invalides (update permissions)', { adminId, invalidPermissions });
            return res.status(400).json({
                message: "Certaines permissions sont invalides",
                invalidPermissions
            });
        }

        admin.permissions = permissions;
        await admin.save();

        logger.info('‚úÖ Permissions administrateur mises √† jour', { adminId, permissionsCount: permissions.length });
        res.json({ 
            message: "Permissions mises √† jour avec succ√®s",
            admin: {
                ...admin.toObject(),
                password: undefined
            }
        });
    } catch (error) {
        logger.error('‚ùå Erreur mise √† jour permissions', { message: error.message, stack: error.stack, adminId: req.params?.adminId });
        res.status(500).json({ message: "Erreur lors de la mise √† jour des permissions" });
    }
};

// Obtenir la liste des permissions disponibles
const getAvailablePermissions = async (req, res) => {
    try {
        logger.info('\nüìñ R√©cup√©ration des permissions disponibles');
        const payload = {
            permissions: PERMISSIONS,
            adminRoles: ADMIN_ROLES,
            defaultPermissions: DEFAULT_PERMISSIONS
        };
        logger.info('‚úÖ Permissions disponibles r√©cup√©r√©es', {
            permissionsCount: Object.keys(PERMISSIONS || {}).length,
            rolesCount: Object.keys(ADMIN_ROLES || {}).length,
            defaultCount: (DEFAULT_PERMISSIONS || []).length
        });
        res.json(payload);
    } catch (error) {
        logger.error('‚ùå Erreur r√©cup√©ration permissions disponibles', { message: error.message, stack: error.stack });
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des permissions disponibles" });
    }
};

module.exports = {
    getPendingAdmins,
    validateAdmin,
    revokeAdmin,
    getAllAdmins,
    updateAdminPermissions,
    getAvailablePermissions
}; 